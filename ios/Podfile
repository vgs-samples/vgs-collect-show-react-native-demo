require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, '17.2'
install! 'cocoapods', :deterministic_uuids => false

# Force pods to match minimum iOS version for React Native
# Fixes build issue on Xcode Cloud where some pods
# Use iOS 12 calls despite being set as iOS 11
def __apply_Xcode_14_3_RC_post_install_workaround(installer)
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      current_target = config.build_settings['IPHONEOS_DEPLOYMENT_TARGET']
      minimum_target = 12.0
      if current_target.to_f < minimum_target.to_f
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = minimum_target
      end
    end
  end
end

target 'AwesomeProject' do
  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
    :hermes_enabled => true,
    :fabric_enabled => flags[:fabric_enabled],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
  
  # VGS SDKs pods
  pod 'VGSCollectSDK', "1.16.2"
  pod 'VGSCollectSDK/CardIO', "1.16.2"
  pod 'VGSShowSDK', "1.2.1"

  target 'AwesomeProjectTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    react_native_post_install(
          installer,
          # Set `mac_catalyst_enabled` to `true` in order to apply patches
          # necessary for Mac Catalyst builds
          :mac_catalyst_enabled => false
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
    __apply_Xcode_14_3_RC_post_install_workaround(installer)
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION']
      end
    end
  
  
  installer.pods_project.targets.each do |target|
        if target.name == 'Flipper'
          file_path = 'Pods/Flipper/xplat/Flipper/FlipperTransportTypes.h'
          contents = File.read(file_path)
          unless contents.include?('#include <functional>')
            File.chmod(0755, file_path)
            File.open(file_path, 'w') do |file|
              file.puts('#include <functional>')
              file.puts(contents)
            end
          end
        end
      end
  end
end

